#!/usr/bin/env python3
"""
RFP Document Generator

This script generates downloadable RFP documents from workflow results.
It can export RFP documents in both Markdown and PDF formats for demo purposes.
"""

import json
import os
from datetime import datetime
from pathlib import Path
import argparse


class RFPDocumentGenerator:
    def __init__(self, workflow_results_dir="workflow_results"):
        self.workflow_results_dir = Path(workflow_results_dir)
        
    def load_latest_workflow_result(self):
        """Load the most recent workflow result JSON file."""
        if not self.workflow_results_dir.exists():
            raise FileNotFoundError(f"Workflow results directory not found: {self.workflow_results_dir}")
        
        # Get all JSON files and sort by modification time
        json_files = list(self.workflow_results_dir.glob("*.json"))
        if not json_files:
            raise FileNotFoundError("No workflow result files found")
        
        latest_file = max(json_files, key=lambda f: f.stat().st_mtime)
        
        with open(latest_file, 'r', encoding='utf-8') as f:
            return json.load(f), latest_file.name
    
    def load_specific_workflow_result(self, filename):
        """Load a specific workflow result JSON file."""
        file_path = self.workflow_results_dir / filename
        if not file_path.exists():
            raise FileNotFoundError(f"Workflow result file not found: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f), filename
    
    def extract_company_info(self, workflow_data):
        """Extract company information from workflow data."""
        try:
            company_analysis = workflow_data.get('company_analysis', {})
            if isinstance(company_analysis.get('company_analysis'), str):
                # Parse JSON string if needed
                company_data = json.loads(company_analysis['company_analysis'])
            else:
                company_data = company_analysis.get('company_analysis', {})
            
            company_overview = company_data.get('CompanyOverview', {})
            return {
                'name': company_overview.get('CompanyName', 'Unknown Company'),
                'industry': company_overview.get('Industry', 'Unknown Industry'),
                'size': company_overview.get('Size', {}),
                'location': company_overview.get('Location', {})
            }
        except (json.JSONDecodeError, KeyError, TypeError):
            return {
                'name': 'Unknown Company',
                'industry': 'Unknown Industry',
                'size': {},
                'location': {}
            }
    
    def generate_markdown_rfp(self, workflow_data, output_filename=None):
        """Generate RFP document in Markdown format."""
        rfp_content = workflow_data.get('rfp_document', {}).get('rfp_content', '')
        project_description = workflow_data.get('rfp_document', {}).get('project_description', 'Unknown Project')
        quality_score = workflow_data.get('quality_score', 'N/A')
        timestamp = workflow_data.get('timestamp', datetime.now().isoformat())
        
        company_info = self.extract_company_info(workflow_data)
        
        # Add metadata footer
        metadata_footer = f"""

---

**Generated by:** RFP Agent Orchestrator System  
**Date:** {datetime.fromisoformat(timestamp.replace('Z', '+00:00')).strftime('%B %d, %Y')}  
**Quality Score:** {quality_score}/10  
**Company Profile:** {company_info['name']}  
**Industry:** {company_info['industry']}

This RFP is issued in compliance with county policies and procedures, ensuring all vendors have a fair opportunity to participate in the procurement process. We look forward to your proposals."""
        
        full_content = rfp_content + metadata_footer
        
        if not output_filename:
            safe_project_name = "".join(c for c in project_description if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_project_name = safe_project_name.replace(' ', '_')
            output_filename = f"{safe_project_name}_RFP.md"
        
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write(full_content)
        
        return output_filename, full_content
    
    def generate_html_rfp(self, workflow_data, output_filename=None):
        """Generate RFP document in HTML format for better viewing."""
        rfp_content = workflow_data.get('rfp_document', {}).get('rfp_content', '')
        project_description = workflow_data.get('rfp_document', {}).get('project_description', 'Unknown Project')
        quality_score = workflow_data.get('quality_score', 'N/A')
        timestamp = workflow_data.get('timestamp', datetime.now().isoformat())
        
        company_info = self.extract_company_info(workflow_data)
        
        # Convert Markdown to basic HTML
        html_content = self.markdown_to_html(rfp_content)
        
        # Create full HTML document
        html_template = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_description} - RFP</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        h1 {{ font-size: 2.5em; }}
        h2 {{ font-size: 2em; }}
        h3 {{ font-size: 1.5em; }}
        .metadata {{
            background-color: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }}
        .metadata strong {{
            color: #2c3e50;
        }}
        ul, ol {{
            padding-left: 30px;
        }}
        li {{
            margin-bottom: 5px;
        }}
        hr {{
            border: none;
            height: 2px;
            background-color: #3498db;
            margin: 30px 0;
        }}
    </style>
</head>
<body>
    {html_content}
    
    <hr>
    
    <div class="metadata">
        <p><strong>Generated by:</strong> RFP Agent Orchestrator System</p>
        <p><strong>Date:</strong> {datetime.fromisoformat(timestamp.replace('Z', '+00:00')).strftime('%B %d, %Y')}</p>
        <p><strong>Quality Score:</strong> {quality_score}/10</p>
        <p><strong>Company Profile:</strong> {company_info['name']}</p>
        <p><strong>Industry:</strong> {company_info['industry']}</p>
    </div>
    
    <p><em>This RFP is issued in compliance with county policies and procedures, ensuring all vendors have a fair opportunity to participate in the procurement process. We look forward to your proposals.</em></p>
</body>
</html>"""
        
        if not output_filename:
            safe_project_name = "".join(c for c in project_description if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_project_name = safe_project_name.replace(' ', '_')
            output_filename = f"{safe_project_name}_RFP.html"
        
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write(html_template)
        
        return output_filename, html_template
    
    def markdown_to_html(self, markdown_text):
        """Convert basic Markdown to HTML."""
        lines = markdown_text.split('\n')
        html_lines = []
        in_list = False
        
        for line in lines:
            line = line.strip()
            
            if not line:
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append('<br>')
                continue
            
            # Headers
            if line.startswith('### '):
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append(f'<h3>{line[4:]}</h3>')
            elif line.startswith('## '):
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append(f'<h2>{line[3:]}</h2>')
            elif line.startswith('# '):
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append(f'<h1>{line[2:]}</h1>')
            # Bold text
            elif line.startswith('**') and line.endswith('**'):
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append(f'<p><strong>{line[2:-2]}</strong></p>')
            # List items
            elif line.startswith('- '):
                if not in_list:
                    html_lines.append('<ul>')
                    in_list = True
                html_lines.append(f'<li>{line[2:]}</li>')
            # Horizontal rule
            elif line.startswith('---'):
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append('<hr>')
            # Regular paragraph
            else:
                if in_list:
                    html_lines.append('</ul>')
                    in_list = False
                html_lines.append(f'<p>{line}</p>')
        
        if in_list:
            html_lines.append('</ul>')
        
        return '\n'.join(html_lines)
    
    def list_available_workflows(self):
        """List all available workflow result files."""
        if not self.workflow_results_dir.exists():
            return []
        
        json_files = list(self.workflow_results_dir.glob("*.json"))
        workflow_info = []
        
        for file_path in sorted(json_files, key=lambda f: f.stat().st_mtime, reverse=True):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                project_desc = data.get('rfp_document', {}).get('project_description', 'Unknown Project')
                timestamp = data.get('timestamp', 'Unknown Date')
                quality_score = data.get('quality_score', 'N/A')
                
                workflow_info.append({
                    'filename': file_path.name,
                    'project': project_desc,
                    'timestamp': timestamp,
                    'quality_score': quality_score
                })
            except (json.JSONDecodeError, KeyError):
                continue
        
        return workflow_info


def main():
    parser = argparse.ArgumentParser(description='Generate RFP documents from workflow results')
    parser.add_argument('--file', '-f', help='Specific workflow result file to use')
    parser.add_argument('--format', '-fmt', choices=['markdown', 'html', 'both'], default='both',
                       help='Output format (default: both)')
    parser.add_argument('--output', '-o', help='Output filename (without extension)')
    parser.add_argument('--list', '-l', action='store_true', help='List available workflow files')
    
    args = parser.parse_args()
    
    generator = RFPDocumentGenerator()
    
    if args.list:
        workflows = generator.list_available_workflows()
        if not workflows:
            print("No workflow result files found.")
            return
        
        print("Available workflow results:")
        print("-" * 80)
        for i, workflow in enumerate(workflows, 1):
            print(f"{i}. {workflow['filename']}")
            print(f"   Project: {workflow['project']}")
            print(f"   Date: {workflow['timestamp']}")
            print(f"   Quality Score: {workflow['quality_score']}/10")
            print()
        return
    
    try:
        # Load workflow data
        if args.file:
            workflow_data, filename = generator.load_specific_workflow_result(args.file)
            print(f"Loaded workflow result: {filename}")
        else:
            workflow_data, filename = generator.load_latest_workflow_result()
            print(f"Loaded latest workflow result: {filename}")
        
        project_name = workflow_data.get('rfp_document', {}).get('project_description', 'Unknown_Project')
        print(f"Project: {project_name}")
        print(f"Quality Score: {workflow_data.get('quality_score', 'N/A')}/10")
        
        # Generate documents
        generated_files = []
        
        if args.format in ['markdown', 'both']:
            output_file = args.output + '.md' if args.output else None
            md_file, _ = generator.generate_markdown_rfp(workflow_data, output_file)
            generated_files.append(md_file)
            print(f"✅ Generated Markdown RFP: {md_file}")
        
        if args.format in ['html', 'both']:
            output_file = args.output + '.html' if args.output else None
            html_file, _ = generator.generate_html_rfp(workflow_data, output_file)
            generated_files.append(html_file)
            print(f"✅ Generated HTML RFP: {html_file}")
        
        print(f"\n🎉 Successfully generated {len(generated_files)} RFP document(s)!")
        print("Files are ready for download and demo purposes.")
        
    except FileNotFoundError as e:
        print(f"❌ Error: {e}")
    except json.JSONDecodeError as e:
        print(f"❌ Error parsing JSON file: {e}")
    except Exception as e:
        print(f"❌ Unexpected error: {e}")


if __name__ == "__main__":
    main()